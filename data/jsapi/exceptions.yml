package: sys.exceptions
page: app-development-js-api-exceptions.html
description: |
  This package contains methods to work with exceptions.
methods:
  - name: getCode
    summary: Returns the error code in case the parameter passed is of type `sys.exceptions.ScriptException`
    description: |
      Returns the error code in case the parameter passed is of type `sys.exceptions.ScriptException`.
      Otherwise return `null`.
      
      The advantage of using this method instead of just calling `sys.exceptions.ScriptException.code()` is that you don't
      need to worry if it is a platform exception or any other kind of exceptions. Otherwise you should first check it is
      a platform exception before fetching the code.
    parameters:
      - name: exception
        type: sys.exceptions.ScriptException|Error
        required: yes
        description: The platform exception to get the code from or any other kind of throwable object.
    returnType: string
    returnDescription: The code of the exception or `null`.
    throws:
    samples:
      - title: logs the code of a platform exception
        code: |
          try {
            var query = sys.data.createQuery('entityThatDoesNotExist');
          } catch (e) {
            log('error code: '+sys.exceptions.getCode(e));
          }
      - title: when it is a Javascript exception it will return 'null'
        code: |
          try {
            // this var doesn't exist an will throw a Javascript error
            var a = doesNotExist * 5;
          } catch (e) {
            log('error code: '+sys.exceptions.getCode(e));
          }
  - name: getMessage
    summary: Returns the error message in the exception
    description: |
      Returns the error message in the exception. If the parameter is a string, returns it. If it is a `sys.exceptions.ScriptException`,
      then returns the message contained inside. If it is an object, returns its JSON representation. Otherwise
      tries to cast the parameter to a string.
      
      The advantage of using this method instead of just calling `sys.exceptions.ScriptException.message()` is that you don't
      need to worry if it is a platform exception or any other kind of exceptions. Otherwise you should first check it is
      a platform exception before fetching the message.
    parameters:
      - name: exception
        type: sys.exceptions.ScriptException|Error
        required: yes
        description: The platform exception to get the message from or any other kind of throwable object.
    returnType: string|object
    returnDescription: The message of the exception, a JSON object, or just the string representation.
    throws:
    samples:
      - title: logs the message of a platform exception
        code: |
          try {
            var query = sys.data.createQuery('entityThatDoesNotExist');
          } catch (e) {
            log('error message: '+sys.exceptions.getMessage(e));
          }
      - title: logs the message of a Javascript exception
        code: |
          try {
            // this var doesn't exist an will throw a Javascript error
            var a = doesNotExist *
