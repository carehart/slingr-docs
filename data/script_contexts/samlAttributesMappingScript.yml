params:
  - name: idpAttributes
    type: object
    description: |
      This object contains all the attributes comming from the SAML identity provider. For example
      if the identity providers sends an attribute with name `firstName`, you should be able to
      access it using `idpAttributes.firstName`.
returnType: object
returnDescription: |
  The script should return an object with the following attributes:

  - `userId`: immutable ID from identity provider. This will be set as the external ID of the user for
    this identity provider.
  - `userEmail`: email of the user in the identity provider.
  - `userFirstName`: first name of the user in the identity provider.
  - `userLastName`: last name of the user in the identity provider.
  - `userGroups`: groups that user belongs to in the identity provider. It is a list of group names
    separated by comma.
samples:
  - title: this is a mapping script where some values are encoded in Base64
    code: |
      var Base64 = {
          _keyStr: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
          check: function(s) {
              var endsWith = function(s, suffix) {
                  return s.indexOf(suffix, this.length - suffix.length) !== -1;
              };
              var base64Matcher = new RegExp("^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})([=]{1,2})?$");
              return endsWith(s, '=') && base64Matcher.test(s);
          },
          encode: function(input) {
              var output = "";
              var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
              var i = 0;
              input = Base64._utf8_encode(input);
              while (i < input.length) {
                  chr1 = input.charCodeAt(i++);
                  chr2 = input.charCodeAt(i++);
                  chr3 = input.charCodeAt(i++);
                  enc1 = chr1 >> 2;
                  enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
                  enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
                  enc4 = chr3 & 63;
                  if (isNaN(chr2)) {
                      enc3 = enc4 = 64;
                  } else if (isNaN(chr3)) {
                      enc4 = 64;
                  }
                  output = output + this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) + this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);
              }
              return output;
          },
          decode: function(input) {
              var output = "";
              var chr1, chr2, chr3;
              var enc1, enc2, enc3, enc4;
              var i = 0;
              input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
              while (i < input.length) {
                  enc1 = this._keyStr.indexOf(input.charAt(i++));
                  enc2 = this._keyStr.indexOf(input.charAt(i++));
                  enc3 = this._keyStr.indexOf(input.charAt(i++));
                  enc4 = this._keyStr.indexOf(input.charAt(i++));
                  chr1 = (enc1 << 2) | (enc2 >> 4);
                  chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
                  chr3 = ((enc3 & 3) << 6) | enc4;
                  output = output + String.fromCharCode(chr1);
                  if (enc3 != 64) {
                      output = output + String.fromCharCode(chr2);
                  }
                  if (enc4 != 64) {
                      output = output + String.fromCharCode(chr3);
                  }
              }
              output = Base64._utf8_decode(output);
              return output;
          },
          _utf8_encode: function(string) {
              string = string.replace(/\r\n/g, "\n");
              var utftext = "";
              for (var n = 0; n < string.length; n++) {
                  var c = string.charCodeAt(n);
                  if (c < 128) {
                      utftext += String.fromCharCode(c);
                  }
                  else if ((c > 127) && (c < 2048)) {
                      utftext += String.fromCharCode((c >> 6) | 192);
                      utftext += String.fromCharCode((c & 63) | 128);
                  }
                  else {
                      utftext += String.fromCharCode((c >> 12) | 224);
                      utftext += String.fromCharCode(((c >> 6) & 63) | 128);
                      utftext += String.fromCharCode((c & 63) | 128);
                  }
              }
              return utftext;
          },
          _utf8_decode: function(utftext) {
              var string = "";
              var i = 0;
              var c = c1 = c2 = 0;
              while (i < utftext.length) {
                  c = utftext.charCodeAt(i);
                  if (c < 128) {
                      string += String.fromCharCode(c);
                      i++;
                  }
                  else if ((c > 191) && (c < 224)) {
                      c2 = utftext.charCodeAt(i + 1);
                      string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
                      i += 2;
                  }
                  else {
                      c2 = utftext.charCodeAt(i + 1);
                      c3 = utftext.charCodeAt(i + 2);
                      string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
                      i += 3;
                  }
              }
              return string;
          }
      };

      var attributes = {};
      attributes['userId'] = idpAttributes['userId'];
      if (Base64.check(idpAttributes['userFirstName'])) {
          attributes['userFirstName'] = Base64.decode(idpAttributes['userFirstName']);
      } else {
          attributes['userFirstName'] = idpAttributes['userFirstName'];
      }
      if (Base64.check(idpAttributes['userLastName'])) {
          attributes['userLastName'] = Base64.decode(idpAttributes['userLastName']);
      } else {
          attributes['userLastName'] = idpAttributes['userLastName'];
      }
      attributes['userEmail'] = idpAttributes['userEmail'];
      attributes['userGroups'] = 'Default';
      return attributes;
