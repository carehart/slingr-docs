name: integer
overview: |
  This type will generate auto-incremental unique numbers as new records are created for the entity.

  Fields of this type cannot be edited and are always managed by the app. Currently there is no way to
  reset counter or move it to an initial position other than zero.

  If a field of this type is added to an entity with records, it will be initialized assigning values
  in creation order of the records.
features:
  manyMultiplicity:
    supported: false
    notes:
  defaultValue:
    supported: false
    notes:
  uniqueFlag:
    supported: false
    notes:
  requiredFlag:
    supported: false
    notes:
  indexableFlag:
    supported: yes
    notes:
  sensitiveFlag:
    supported: yes
    notes:
  calculatedValue:
    supported: no
    notes:
  automaticInitialization:
    supported: yes
    notes:
  calculatedInitialValue:
    supported: yes
    notes:
  aggregation:
    supported: false
    notes:
  defaultTypeRules:
    supported: yes
    notes:
  defaultDisplayOptions:
    supported: false
    notes:
typeRules:
- name: Minimum value
  description: |
    This is the minimum value to assign to the next record. For example if you set it to 10,000, the next value will
    be 10,000. This setting is useful when you want numbers to start at some specific value.

    This setting won't affect existing records. Also if you change the value to a number lower than the current
    value in the auto-increment, this won't have any effect. For example last record created was assigned number
    3,000, if you change the minimum value to 1,000 that won't have any effect and next value will be 3,001.
restApi:
  readFormat: |
    The format is a number:

    ```js
    "number": 8
    ```
  writeFormat: |
    There is no way to write an auto-increment field.
jsApi:
  readFormat: |
    The `val()` method in the wrapper will return a number:

    ```js
    // this will print something like "number: 23"
    log('number: '+record.field('number').val());
    ```
  writeFormat: |
    There is no way to write an auto-increment field.
exportImport:
  exportFormat: |
    The export format is a simple number:

    ```
    "id","tittle"
    "1","task A"
    "2","task B"
    ```
  importFormat: |
    Auto-increment fields cannot be imported because they are generated.
queries:
  operators:
    equals:
      supported: yes
      notes:
    notEquals:
      supported: yes
      notes:
    empty:
      supported: yes
      notes:
    notEmpty:
      supported: yes
      notes:
    like:
      supported: no
      notes:
    greater:
      supported: yes
      notes:
    greaterOrEquals:
      supported: yes
      notes:
    less:
      supported: yes
      notes:
    lessOrEquals:
      supported: yes
      notes:
    between:
      supported: yes
      notes:
  format: |
    You should pass the number. For example:

    {% include query_sample.html
    id="23WfdsijdjisdijiwqwbbvvQQ"
    description="finds tickets with field number higjer than 10"
    entity="tickets"
    jsQueryMap="{'number': 'greater(10)'}"
    jsQueryBuilder=".field('tickets').greater(10)"
    restApi="tickets=greater(10)"
    %}
aggregateQueries:
  operators:
    sum:
      supported: yes
      notes:
    avg:
      supported: yes
      notes:
    first:
      supported: yes
      notes:
    last:
      supported: yes
      notes:
    min:
      supported: yes
      notes:
    max:
      supported: yes
      notes:
uiQueries:
  matching:
    operator: equals
    notes:
    specialValues:
  operators:
    manyValues:
      supported: yes
      notes:
    great:
      supported: yes
      notes:
    greatOrEquals:
      supported: yes
      notes:
    less:
      supported: yes
      notes:
    lessOrEquals:
      supported: yes
      notes:
    between:
      supported: yes
      notes: