name: date_time
overview: |
  This type can store a date and time.

  The default format is `yyyy-MM-dd HH:mm` but you can change it to something else.
features:
  manyMultiplicity:
    supported: yes
    notes:
  defaultValue:
    supported: yes
    notes:
  uniqueFlag:
    supported: no
    notes:
  requiredFlag:
    supported: yes
    notes:
  indexableFlag:
    supported: yes
    notes:
  sensitiveFlag:
    supported: yes
    notes:
  calculatedValue:
    supported: yes
    notes:
  automaticInitialization:
    supported: no
    notes:
  calculatedInitialValue:
    supported: no
    notes:
  aggregation:
    supported: no
    notes:
  defaultTypeRules:
    supported: no
    notes:
  defaultDisplayOptions:
    supported: yes
    notes:
typeRules:
displayOptions:
- name: Representation
  description: |
    This is the format to display the date and time. Default is `yyyy-MM-dd HH:mm` but it can be changed to something else.

    There are a few predefined formats that are common, but you can choose `Custom` and define your own format
    based on the following rules:

    - Era designator: G (AD)
    - Year: yy (16), yyyy (2016)
    - Month: MMMM (July), MMM (Jul), MM (07)
    - Week in year: w (27)
    - Day in year: D (189)
    - Day in month: d (9), dd (09)
    - Day name in week: EEE (Tue), EEEE (Tuesday)
    - Am/pm marker: a (PM)
    - Hour in 24h: H (0), HH (00)
    - Hour in am/pm: h (1), hh (01)
    - Minute in hour: m (5), mm (05)
    - Second in minute: s (9), ss(09)
    - Millisecond: SSS (123)
    - Time zone: z (-0700), zzzz (-07:00)

    It is possible to define a format for the date-time picker as well.
restApi:
  readFormat: |
    The format is the number of milliseconds sinc Epoch:

    ```js
    "lastUpdate": 1484578380000
    ```
  writeFormat: |
    You should pass the number of milliseconds sinc Epoch:

    ```js
    "lastUpdate": 1484578380000
    ```
jsApi:
  readFormat: |
    The `val()` method in the wrapper will return a `Date` object.

    ```js
    // this will print something like "date: Mon Jan 16 2017 14:53:00 GMT-0000 (UTC)"
    log('date: '+record.field('lastUpdate').val());
    ```
  writeFormat: |
    When writing the value you could either use a `Date` object, a string with the format `yyyy-MM-dd HH:mm` or
    milliseconds since Epoch:

    ```js
    record.field('startDate').val(new Date());
    record.field('startDate').val('2016-07-09');
    ```

    If the value is not valid, the field will be set to `null` silently.
exportImport:
  exportFormat: |
    The export format is `yyyy-MM-dd'T'HH:mm:ss.SSS'Z'` (the value is converted to UTC time),
    no matter the display options for that field:

    ```
    "dateTimeField1","dateTimeField2"
    "2017-05-14T13:20:01.014Z","2015-07-14T08:20:00.000Z"
    ```

    The timezone will be always UTC.
  importFormat: |
    The import format is `yyyy-MM-dd'T'HH:mm:ss.SSS'Z'` (the value is converted to UTC time),
     no matter the display options for that field:

     ```
     "dateTimeField1","dateTimeField2"
     "2017-05-14T13:20:01.014Z","2015-07-14T08:20:00.000Z"
     ```

     The timezone will be always UTC.
queries:
  operators:
    equals:
      supported: yes
      notes:
    notEquals:
      supported: yes
      notes:
    empty:
      supported: yes
      notes:
    notEmpty:
      supported: yes
      notes:
    like:
      supported: no
      notes:
    greater:
      supported: yes
      notes:
    greaterOrEquals:
      supported: yes
      notes:
    less:
      supported: yes
      notes:
    lessOrEquals:
      supported: yes
      notes:
    between:
      supported: yes
      notes:
  format: |
    You should pass the milliseconds since Epoch:

    {% include query_sample.html
    id="111122222MKDIEUEUEUEU"
    description="finds companies where last meeting is after '1458443760000' which is Sun Mar 20 2016 03:16:00 GMT-0000 (UTC)"
    entity="companies"
    jsQueryMap="{'lastMeeting': 'greater(1458443760000)'}"
    jsQueryBuilder=".field('lastMeeting').greater(1458443760000)"
    restApi="lastMetting=greater(1458443760000)"
    %}

    When using the query builder you can use a `Date` object or a string in format 'yyyy-MM-dd HH:mm':

    ```js
    query.field('lastMeeting').less(new Date());
    query.field('lastMeeting').less('2016-03-20 03:16');
    ```
aggregateQueries:
  operators:
    sum:
      supported: no
      notes:
    avg:
      supported: no
      notes:
    first:
      supported: yes
      notes:
    last:
      supported: yes
      notes:
    min:
      supported: yes
      notes:
    max:
      supported: yes
      notes:
uiQueries:
  matching:
    operator: equals
    notes: |
      UI queries will try to match using the format defined in the default display options of the field.
    specialValues: |
      There are some special values you can use:

      - `now`: translates to now. It is the same as writting the current date-time.
      - `today`: it is a range that includes all day today.
      - `yesterday`: it is a range that includes the whole day yesterday.
      - `tomorrow`: it is a range that includes the whole day tomorrow.
      - `last hour/day/week/month/year`: it is a range that includes all in last hour/day/week/month/year
      - `this hour/day/week/month/year`: it is a range that includes all in current hour/day/week/month/year
      - `last X hours/days/weeks/months/years`: it is a range that includes all in the last `X` number of hours/days/weeks/months/years
      - `next X hours/days/weeks/months/years`: it is a range that includes all in the next `X` number of hours/days/weeks/months/years
  operators:
    manyValues:
      supported: yes
      notes:
    great:
      supported: yes
      notes:
    greatOrEquals:
      supported: yes
      notes:
    less:
      supported: yes
      notes:
    lessOrEquals:
      supported: yes
      notes:
    between:
      supported: yes
      notes: