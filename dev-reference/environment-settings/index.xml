<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Environment settings on </title>
    <link>/dev-reference/environment-settings/</link>
    <description>Recent content in Environment settings on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 16 Nov 2020 13:59:39 +0100</lastBuildDate><atom:link href="/dev-reference/environment-settings/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Environment variables</title>
      <link>/dev-reference/environment-settings/environment-var/</link>
      <pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate>
      
      <guid>/dev-reference/environment-settings/environment-var/</guid>
      <description>Environment variables serve as placeholders that can be employed throughout your app&amp;rsquo;s metadata. When the app is loaded, these placeholders are dynamically replaced with their designated values. Employing environment variables instead of hard-coded values offers several distinct advantages:
Modifiable in the Production Environment: Environment variables can be managed via the app monitor, allowing changes to be made in the production environment. This is essential for adjusting app behavior, as the app builder is not accessible in the production environment.</description>
    </item>
    
    <item>
      <title>UI settings</title>
      <link>/dev-reference/environment-settings/ui-settings/</link>
      <pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate>
      
      <guid>/dev-reference/environment-settings/ui-settings/</guid>
      <description>These settings hold a global influence on the app&amp;rsquo;s user interface (UI), impacting its appearance and behavior.
Theme # You can select from a range of themes that will alter the styling of the app, including color schemes. Enabling a different theme results in a comprehensive visual update across all app components.
Show icons # By disabling this option, buttons and menu choices within the app will not display icons. This option is enabled by default.</description>
    </item>
    
    <item>
      <title>Logs and alerts settings</title>
      <link>/dev-reference/environment-settings/logs-and-alerts/</link>
      <pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate>
      
      <guid>/dev-reference/environment-settings/logs-and-alerts/</guid>
      <description>These are crucial app-wide settings accessible through the app builder under Environment Settings &amp;gt; Logs and Alerts.
Logs size # The Logs Size setting allows you to determine the maximum space occupied by the logs collection in memory. It&amp;rsquo;s important to note that this is an inherent attribute of the database engine and generally exceeds the actual size utilized within the database.
Enable cold logs # This toggle, Enable Cold Logs, empowers you to archive historical app logs into files.</description>
    </item>
    
    <item>
      <title>Localization</title>
      <link>/dev-reference/environment-settings/localization/</link>
      <pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate>
      
      <guid>/dev-reference/environment-settings/localization/</guid>
      <description>These are comprehensive app-wide settings found within the app builder under Environment Settings &amp;gt; Localization.
Timezone # The Timezone setting designates the default timezone for the app. This default timezone is utilized in scenarios where no user is associated with the ongoing execution context. For instance, if an event originates from a global legacy service without a specific user triggering it, the default timezone is applied. Moreover, it serves as the default for time listeners, although this can be modified.</description>
    </item>
    
    <item>
      <title>API Tokens</title>
      <link>/dev-reference/environment-settings/api-tokens/</link>
      <pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate>
      
      <guid>/dev-reference/environment-settings/api-tokens/</guid>
      <description>API Tokens serve as credentials for accessing the REST API. Developers are responsible for configuring appropriate permissions for these tokens, which helps restrict access to sensitive information.
The automatically generated key is the essential component that must be utilized in each REST API request. It should be included in the request header under the token parameter.
Public token properties # A public token consists of the following properties:
Label: A human-readable label designed to identify the public token.</description>
    </item>
    
  </channel>
</rss>
