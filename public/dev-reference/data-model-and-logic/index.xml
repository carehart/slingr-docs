<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data model and logic on </title>
    <link>https://pmslingr.github.io/dev-reference/data-model-and-logic/</link>
    <description>Recent content in Data model and logic on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 16 Nov 2020 13:59:39 +0100</lastBuildDate><atom:link href="https://pmslingr.github.io/dev-reference/data-model-and-logic/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Entities</title>
      <link>https://pmslingr.github.io/dev-reference/data-model-and-logic/entities/</link>
      <pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate>
      
      <guid>https://pmslingr.github.io/dev-reference/data-model-and-logic/entities/</guid>
      <description>Entities are the fundamental concept in a Slingr app. They define both the data structure and the behavior of an app. Entities can represent various entities like companies, people, tasks, projects, and more.
Once an entity is created, you can create records within that entity. For instance, if you have an entity named companies, each individual company under that entity will be treated as a record.
An entity defines the following aspects:</description>
    </item>
    
    <item>
      <title>Fields</title>
      <link>https://pmslingr.github.io/dev-reference/data-model-and-logic/fields/</link>
      <pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate>
      
      <guid>https://pmslingr.github.io/dev-reference/data-model-and-logic/fields/</guid>
      <description>Fields serve as the fundamental units of data in Slingr apps. They primarily define the structure of entities, but also find utility in other contexts, such as parameters within actions.
A pivotal attribute of a field is its type, which determines the available options, rules, display preferences, and user interfaces for editing and reading. More information about types is available here.
Field settings are organized as follows:
Basic Settings: These foundational settings are essential for all fields.</description>
    </item>
    
    <item>
      <title>Actions</title>
      <link>https://pmslingr.github.io/dev-reference/data-model-and-logic/actions/</link>
      <pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate>
      
      <guid>https://pmslingr.github.io/dev-reference/data-model-and-logic/actions/</guid>
      <description>Actions allow you to define behaviors for records within an entity beyond basic operations like creation or deletion. For example, in an entity that manages tasks, you could implement an action to mark a task as complete. This action might involve checking preconditions, updating the task&amp;rsquo;s status, and notifying relevant parties.
Once an action is defined for an entity, it becomes accessible through the UI, the REST API, and the JavaScript API.</description>
    </item>
    
    <item>
      <title>Listeners</title>
      <link>https://pmslingr.github.io/dev-reference/data-model-and-logic/listeners/</link>
      <pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate>
      
      <guid>https://pmslingr.github.io/dev-reference/data-model-and-logic/listeners/</guid>
      <description>Listeners allow you to connect with various events within the app. For instance, you can listen to the creation of records or the reception of an event from an legacy service and take certain actions when these events occur.
Apart from event listening, it&amp;rsquo;s also possible to schedule listeners to run periodically based on a CRON expression.
Label # This represents the human-readable name of the listener.
Name # This serves as the internal name of the listener.</description>
    </item>
    
    <item>
      <title>Libraries</title>
      <link>https://pmslingr.github.io/dev-reference/data-model-and-logic/libraries/</link>
      <pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate>
      
      <guid>https://pmslingr.github.io/dev-reference/data-model-and-logic/libraries/</guid>
      <description>Libraries are essentially JavaScript files where you can store code that is intended to be shared across various sections of your application. For instance, you might create a library to handle the encoding and decoding of strings, a functionality required in multiple actions throughout your application. Instead of duplicating these algorithms within each action, you can centralize them within a library and invoke them from your actions.
The structure of a library&amp;rsquo;s code is depicted as follows:</description>
    </item>
    
    <item>
      <title>Legacy services</title>
      <link>https://pmslingr.github.io/dev-reference/data-model-and-logic/endpoints/</link>
      <pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate>
      
      <guid>https://pmslingr.github.io/dev-reference/data-model-and-logic/endpoints/</guid>
      <description>Legacy services are components that operate alongside your app. They possess their own resources and their primary purpose is to enhance the platform&amp;rsquo;s capabilities.
A prevalent use case is establishing connections between your app and other applications through the utilization of APIs for sending, receiving, and retrieving data. For instance, endpoints exist for services like Slack, Google Contacts, Google Calendar, and various other widely-used cloud platforms. This allows your app to seamlessly leverage the functionalities provided by these external services.</description>
    </item>
    
    <item>
      <title>Services</title>
      <link>https://pmslingr.github.io/dev-reference/data-model-and-logic/services/</link>
      <pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate>
      
      <guid>https://pmslingr.github.io/dev-reference/data-model-and-logic/services/</guid>
      <description>Services are essential components that run alongside your application. They possess their own set of resources and are primarily designed to extend the capabilities of the platform.
The most common use case for services is to facilitate connections between your application and external apps by enabling the sending, receiving, and fetching of data through external APIs. For instance, you can create a service to manage HTTP requests or to generate PDF files.</description>
    </item>
    
    <item>
      <title>Packages</title>
      <link>https://pmslingr.github.io/dev-reference/data-model-and-logic/packages/</link>
      <pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate>
      
      <guid>https://pmslingr.github.io/dev-reference/data-model-and-logic/packages/</guid>
      <description>Packages are a convenient way to import a set of metadata into your application. Their primary purpose is to streamline the implementation of predefined functionalities, saving developers a significant amount of time.
The most common use cases for packages include importing utility libraries to perform common operations and connecting your application with external services by sending, receiving, and fetching data via their APIs. Packages contain all the logic necessary for utilizing an HTTP service and consuming these external APIs.</description>
    </item>
    
    <item>
      <title>UI services</title>
      <link>https://pmslingr.github.io/dev-reference/data-model-and-logic/ui-services/</link>
      <pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate>
      
      <guid>https://pmslingr.github.io/dev-reference/data-model-and-logic/ui-services/</guid>
      <description>UI Services are client-side components designed to enhance the user interface (UI) features of the platform.
The primary use case for UI Services is to facilitate interactions with external applications on the client side. For example, a UI Service could be created to interact with Twilio, allowing it to display an incoming call and enabling users to answer it directly within the platform&amp;rsquo;s UI.
Action definition # When an action is defined for an entity, it becomes accessible through the UI, REST API, and JavaScript API.</description>
    </item>
    
  </channel>
</rss>
