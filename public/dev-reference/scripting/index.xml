<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scripting on </title>
    <link>https://pmslingr.github.io/dev-reference/scripting/</link>
    <description>Recent content in Scripting on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 16 Nov 2020 13:59:39 +0100</lastBuildDate><atom:link href="https://pmslingr.github.io/dev-reference/scripting/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Overview</title>
      <link>https://pmslingr.github.io/dev-reference/scripting/overview/</link>
      <pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate>
      
      <guid>https://pmslingr.github.io/dev-reference/scripting/overview/</guid>
      <description>Javascript API Overview # Scripts provide a highly flexible means of extending and customizing your apps. While a declarative approach is often preferred, we recognize that in certain situations, it may not be feasible to cover all scenarios. Sometimes, writing a few lines of code is more straightforward than navigating a complex and time-consuming user interface to express certain functionalities in a declarative manner.
The primary objective is for you to write scripts solely to define your application&amp;rsquo;s behavior.</description>
    </item>
    
    <item>
      <title>Namespaces</title>
      <link>https://pmslingr.github.io/dev-reference/scripting/namespaces/</link>
      <pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate>
      
      <guid>https://pmslingr.github.io/dev-reference/scripting/namespaces/</guid>
      <description>Overview # The JavaScript API enables access to various components of your application through scripts. For instance, you can conduct queries, manipulate data, execute actions, or assess the status of background jobs.
The API is structured into packages, each catering to distinct functions such as data manipulation, user management, or background job monitoring.
Subsequent sections delve into comprehensive information about each segment of the JavaScript API.
Namespaces # App Common classes Context Data Legacy Services Events Exceptions Files Internationalization Jobs Logs Storage [UI](https://pmslingr.</description>
    </item>
    
    <item>
      <title>sys.app</title>
      <link>https://pmslingr.github.io/dev-reference/scripting/sys-app/</link>
      <pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate>
      
      <guid>https://pmslingr.github.io/dev-reference/scripting/sys-app/</guid>
      <description>sys.app # This package encompasses methods for retrieving information about the app, such as its name, URL, current environment, and more.
getLabel() # Returns the label of the app currently in execution.
Returns # string - The label of the app.
Samples # // logs the label of the app log(&#39;app: &#39;+sys.app.getLabel()); getName() # Returns the name of the app currently in execution.
Returns # string - The name of the app.</description>
    </item>
    
    <item>
      <title>sys.auth</title>
      <link>https://pmslingr.github.io/dev-reference/scripting/sys.auth/</link>
      <pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate>
      
      <guid>https://pmslingr.github.io/dev-reference/scripting/sys.auth/</guid>
      <description>sys.auth # This package contains some utilities to work with authentication of the API REST.
sendOtpCode(options) # Request an OTP code for a specific email or phone with the permission of the current user.
Parameters # Name Type Required Description options object yes These options allow you to configure the validity of the code and token to be generated and the destination to which it will be sent. Available option is:</description>
    </item>
    
    <item>
      <title>sys.commons</title>
      <link>https://pmslingr.github.io/dev-reference/scripting/sys-commons/</link>
      <pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate>
      
      <guid>https://pmslingr.github.io/dev-reference/scripting/sys-commons/</guid>
      <description>sys.commons.ResultSet # ResultSet is an iterator designed for traversing API service call results. The ResultSet object retains a cursor that indicates the current object it&amp;rsquo;s pointing to. Initially, the cursor is positioned before the first object. The next() method advances the cursor to the next available object.
The cursor can only move forward.
hasNext() # Checks whether there are more objects.
Returns # boolean - true if there are more objects, false otherwise.</description>
    </item>
    
    <item>
      <title>sys.context</title>
      <link>https://pmslingr.github.io/dev-reference/scripting/sys-context/</link>
      <pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate>
      
      <guid>https://pmslingr.github.io/dev-reference/scripting/sys-context/</guid>
      <description>sys.context # This package provides methods to retrieve information about the execution context of the script, such as the current user or the call stack.
getCurrentUserRecord() # Returns a sys.data.Record object containing the extended user fields for the user in the ongoing execution context. If there is no user defined in the current execution context, this method will return null.
Returns # sys.data.record - The user in the current execution context, or null if not set.</description>
    </item>
    
    <item>
      <title>sys.data</title>
      <link>https://pmslingr.github.io/dev-reference/scripting/sys-data/</link>
      <pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate>
      
      <guid>https://pmslingr.github.io/dev-reference/scripting/sys-data/</guid>
      <description>sys.data # This package contains methods and classes for working with data in your application. You&amp;rsquo;ll find utilities for querying data, creating, updating, or deleting records, as well as more advanced operations like aggregation and executing actions.
findById(entityName, id) # This function finds a record by its ID. If the record is not found, null will be returned.
Parameters # Name Type Required Description entityName string yes The name of the entity id string yes ID of the record to find Returns # sys.</description>
    </item>
    
    <item>
      <title>sys.endpoints</title>
      <link>https://pmslingr.github.io/dev-reference/scripting/sys-endpoints/</link>
      <pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate>
      
      <guid>https://pmslingr.github.io/dev-reference/scripting/sys-endpoints/</guid>
      <description>sys.endpoints # The sys.endpoints package comprises methods designed to manage legacy services.
findById() # This method locates an endpoint using its unique ID.
Parameters # Name Type Required Description id string yes ID of the endpoint Returns # sys.endpoints.Endpoint - The endpoint object or null if not found.
Exceptions # badRequest
If id is not a valid ID or it is empty.
Samples # // finds an endpoint and prints its status var endpoint = sys.</description>
    </item>
    
    <item>
      <title>sys.events</title>
      <link>https://pmslingr.github.io/dev-reference/scripting/sys-events/</link>
      <pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate>
      
      <guid>https://pmslingr.github.io/dev-reference/scripting/sys-events/</guid>
      <description>sys.events # The sys.events package encompasses methods intended for the administration of custom events.
triggerEvent(event,data) # This method initiates a custom event within the application, which can be captured by any listener set up to monitor a CUSTOM_EVENT with a name matching the event parameter.
Parameters # Name Type Required Description event string yes The name of dispatched custom event. data object no Map of properties that will be sent as data of event.</description>
    </item>
    
    <item>
      <title>sys.exceptions</title>
      <link>https://pmslingr.github.io/dev-reference/scripting/sys-exceptions/</link>
      <pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate>
      
      <guid>https://pmslingr.github.io/dev-reference/scripting/sys-exceptions/</guid>
      <description>sys.exceptions # The sys.exceptions package comprises methods tailored for handling exceptions.
getCode(exception) # This method retrieves the error code when the provided parameter is of the type sys.exceptions.ScriptException. If the parameter is of a different type, it returns null.
The benefit of utilizing this method over directly invoking sys.exceptions.ScriptException.code() is that you are relieved from the concern of whether the exception is a platform-specific one or belongs to another category. In scenarios where the exception type is not certain, it&amp;rsquo;s advisable to first verify if it&amp;rsquo;s a platform exception prior to retrieving the code.</description>
    </item>
    
  </channel>
</rss>
