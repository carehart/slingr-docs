<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>User interface on </title>
    <link>https://pmslingr.github.io/dev-reference/user-interface/</link>
    <description>Recent content in User interface on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 16 Nov 2020 13:59:39 +0100</lastBuildDate><atom:link href="https://pmslingr.github.io/dev-reference/user-interface/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Overview</title>
      <link>https://pmslingr.github.io/dev-reference/user-interface/overview/</link>
      <pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate>
      
      <guid>https://pmslingr.github.io/dev-reference/user-interface/overview/</guid>
      <description>Slingr streamlines the UI creation process by offering a range of features designed to expedite development. The ultimate goal is to empower developers to craft compelling UIs without getting bogged down in intricate details and boilerplate code.
Unlike many low-code platforms where developers still need to manually assemble UI elements within a form, carefully manage layout, and establish connections between the UI and data/operations, Slingr takes a different approach. While this approach might represent progress beyond raw HTML, CSS, and JavaScript, it often demands considerable time and effort, particularly when the app model undergoes changes.</description>
    </item>
    
    <item>
      <title>Navigation</title>
      <link>https://pmslingr.github.io/dev-reference/user-interface/navigation/</link>
      <pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate>
      
      <guid>https://pmslingr.github.io/dev-reference/user-interface/navigation/</guid>
      <description>Navigation within your app refers to how users can access different views.
Slingr offers three primary navigation methods:
Main Menu: This menu is positioned on the left side of the app. Its visibility depends on the device&amp;rsquo;s screen size; it may be hidden on smaller screens. You can add menu items at the root level or use menu groups to introduce one level of nesting. Secondary Menu: Found in the top-right area of the app, this menu allows you to add menu items (without menu groups) that will appear to the left of the User menu.</description>
    </item>
    
    <item>
      <title>Grid views</title>
      <link>https://pmslingr.github.io/dev-reference/user-interface/grid-views/</link>
      <pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate>
      
      <guid>https://pmslingr.github.io/dev-reference/user-interface/grid-views/</guid>
      <description>Grid views facilitate the display of records from an entity in a list format. This list offers capabilities such as sorting, pagination, filtering, and more.
Within the list, users can open, edit, and delete listed records. Additionally, new records can be created directly from this view.
Furthermore, grid views can incorporate subgrids for parent-child relationships.
Entity # This specifies the entity to which the view is linked. Only records belonging to this entity will be listed within the grid view.</description>
    </item>
    
    <item>
      <title>Workflow views</title>
      <link>https://pmslingr.github.io/dev-reference/user-interface/workflow-views/</link>
      <pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate>
      
      <guid>https://pmslingr.github.io/dev-reference/user-interface/workflow-views/</guid>
      <description>Workflow views facilitate the display of entity records in a board-style layout, organized by columns. This organizational structure proves particularly beneficial for scenarios involving workflows. For instance, you could employ a tasks entity, and within the workflow view, you could establish columns such as To do, In progress, and Done. Records are allocated to respective columns based on their status. Users possess the capability to shift cards across columns as they progress through tasks, arrange cards within columns to indicate priority, and more.</description>
    </item>
    
    <item>
      <title>Calendar views</title>
      <link>https://pmslingr.github.io/dev-reference/user-interface/calendar-views/</link>
      <pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate>
      
      <guid>https://pmslingr.github.io/dev-reference/user-interface/calendar-views/</guid>
      <description>Calendar views enable you to display records from an entity on a calendar, where each record represents an editable event. By default, the current month is displayed, but you can navigate through different months and switch between various views to see weeks and days.
From within calendar views, you can perform actions such as creating new records, viewing details of individual records, editing records, and executing actionsâ€”similar to the functionalities available in grid and card views.</description>
    </item>
    
    <item>
      <title>Records views</title>
      <link>https://pmslingr.github.io/dev-reference/user-interface/record-views/</link>
      <pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate>
      
      <guid>https://pmslingr.github.io/dev-reference/user-interface/record-views/</guid>
      <description>Record views enable you to display the content of a record. You can specify which fields are shown, override default display options, and indicate which actions can be performed, among other things.
Label # This represents a human-readable name for the view. You can utilize spaces, special characters, and a mixture of upper and lower case letters.
This label will appear at the top of the grid view, so ensure you choose something that users will readily comprehend.</description>
    </item>
    
    <item>
      <title>Action views</title>
      <link>https://pmslingr.github.io/dev-reference/user-interface/action-views/</link>
      <pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate>
      
      <guid>https://pmslingr.github.io/dev-reference/user-interface/action-views/</guid>
      <description>To enable the execution of an action from the UI, it&amp;rsquo;s necessary to define a corresponding view for it. Simplifying this process, when an action is created, a default view is also generated. This default view is fully managed, meaning new parameters will be automatically added and removed as you modify your actions. In many cases, you can simply disregard action views and utilize the default view.
Nevertheless, it&amp;rsquo;s possible to create multiple views for a single action, each configured based on different requirements within different UI components.</description>
    </item>
    
    <item>
      <title>Custom views</title>
      <link>https://pmslingr.github.io/dev-reference/user-interface/custom-views/</link>
      <pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate>
      
      <guid>https://pmslingr.github.io/dev-reference/user-interface/custom-views/</guid>
      <description>Custom views enable you to embed a completely customized HTML page within your app. This proves invaluable when you encounter requirements that aren&amp;rsquo;t supported by the built-in view types.
These custom views will be displayed as iframes within the main content area of your app. This grants you the freedom to integrate any CSS and libraries you require, without needing to be concerned about conflicts with the app&amp;rsquo;s components.
Custom views provide a Javascript API, simplifying interaction with the app.</description>
    </item>
    
    <item>
      <title>Dashboard views</title>
      <link>https://pmslingr.github.io/dev-reference/user-interface/dashboard-views/</link>
      <pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate>
      
      <guid>https://pmslingr.github.io/dev-reference/user-interface/dashboard-views/</guid>
      <description>Dashboard views allow you to host various widget views, organizing them in rows and columns similar to a grid system. These widgets can appear in multiple dashboards. The available widgets include:
Indicator widget. Table widget. Line chart widget. Bar chart widget. Pie chart widget. Custom widget. Label # This is a human-readable name of the view. You can use spaces, special characters, and mix upper case and lower case letters. This label will be displayed at the top of the dashboard view, so make sure you use something users will understand.</description>
    </item>
    
    <item>
      <title>UI Plugins</title>
      <link>https://pmslingr.github.io/dev-reference/user-interface/ui-plugins/</link>
      <pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate>
      
      <guid>https://pmslingr.github.io/dev-reference/user-interface/ui-plugins/</guid>
      <description>Plugins are components that operate on the client side and enable the expansion of the platform&amp;rsquo;s UI features.
A common scenario for plugins is facilitating interaction with external applications on the client side. For instance, a Twilio UI plugin could display incoming calls and provide users the ability to answer them.
A comprehensive list of official plugins can be accessed here.
Configuration # While plugins may have specific settings, they all share certain common settings.</description>
    </item>
    
  </channel>
</rss>
